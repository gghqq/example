什么是索引? 索引是个什么样的数据结构呢? Hash索引和B+树索引有什么区别或者说优劣?
1.索引是一种数据结构,可以帮助我们快速的进行数据的查找。
2.MySQL中使用较多的索引有Hash索引,B+树索引等,而我们经常使用的InnoDB存储引擎的默认索引实现为:B+树索引。
3.hash索引底层就是hash表,进行查找时,调用一次hash函数就可以获取到相应的键值,之后进行回表查询获得实际数据.
  B+树底层实现是多路平衡查找树.对于每一次的查询都是从根节点出发,查找到叶子节点方可以获得所查键值,然后根据查询判断是否需要回表查询数据.
  hash索引进行等值查询更快(一般情况下),但是却无法进行范围查询.
  因为在hash索引中经过hash函数建立索引之后,索引的顺序与原顺序无法保持一致,不能支持范围查询.而B+树的的所有节点皆遵循(左节点小于父节点,右节点大于父节点,多叉树也类似),天然支持范围.
  hash索引不支持使用索引进行排序,原理同上.
  hash索引不支持模糊查询以及多列索引的最左前缀匹配.原理也是因为hash函数的不可预测.AAAA和AAAAB的索引没有相关性.
  hash索引任何时候都避免不了回表查询数据,而B+树在符合某些条件(聚簇索引,覆盖索引等)的时候可以只通过索引完成查询.
  hash索引虽然在等值查询上较快,但是不稳定.性能不可预测,当某个键值存在大量重复的时候,发生hash碰撞,此时效率可能极差.而B+树的查询效率比较稳定,对于所有的查询都是从根节点到叶子节点,且树的高度较低.

InnoDB 和 MyISAM区别?
1、InnoDB支持主外键、事务；
2、InnoDB是行锁，操作时候只锁一行数据，适合高并发；MyISAM是表索；
3、InnoDB不仅缓存索引，还缓存真实数据；MyISAM只缓存索引；
4、InnoDB需要表空间大；
5、InnoDB关注事务，MyISAM关注性能（查）；


事务的ACID属性
原子性（atomicity) 一个事务要么全部提交成功，要么全部失败回滚，不能只执行其中的一部分操作，这就是事务的原子性
一致性（consistency) 事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。 如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所作的修改有一部分已写入物理数据库，这是数据库就处于一种不正确的状态，也就是不一致的状态
隔离性（isolation） 事务的隔离性是指在并发环境中，并发的事务时相互隔离的，一个事务的执行不能不被其他事务干扰。不同的事务并发操作相同的数据时，每个事务都有各自完成的数据空间，即一个事务内部的操作及使用的数据对其他并发事务时隔离的，并发执行的各个事务之间不能相互干扰。 在标准SQL规范中，定义了4个事务隔离级别，不同的隔离级别对事务的处理不同，分别是：未授权读取，授权读取，可重复读取和串行化
持久性（durability） 一旦事务提交，那么它对数据库中的对应数据的状态的变更就会永久保存到数据库中。--即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束的状态
MySQL事务的四个特性中ACD三个特性是通过Redo Log（重做日志）和Undo Log 实现的，而 I（隔离性）是通过Lock（锁）来实现。

并发下事务会产生的问题!!!
1.脏读. 指事务A读到了事务B还未提交事务的数据.  例: A开始事务,读到1000修改为2000,未提交事务->B开始事务,读到2000,->A回滚提交事务->B读到的2000就为脏数据   产生数据不一致的主要原因是并发操作破坏了事务的隔离性。
2.不可重复读.指在一个事务里两次读取的数据不一致.  A开始事务->读到1000->B开始事务->取走100,提交事务->剩余900->A再次读到为900
3.幻读. 前后多次读取，数据总量不一致 例如:事务A在执行读取操作，需要两次统计数据的总量，前一次查询数据总量后，此时事务B执行了新增数据的操作并提交后，这个时候事务A读取的数据总量和之前统计的不一样


MVCC，Multi-Version Concurrency Control，多版本并发控制。这项技术使得InnoDB的事务隔离级别下执行一致性读操作有了保证, 就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值。
MVCC在mysql中的实现
（1）DB_TRX_ID字段，6字节。用来存储的每次对某条聚簇索引记录进行修改的时候的事务id。此外，删除操作在内部被视为更新，其中行中的特殊位被设置为将其标记为已删除。
（2）DB_ROLL_PTR字段，7字节，叫做回滚指针（roll pointer）。存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息 如果行已更新，则撤消日志包含重建更新前该行内容所需的信息。
（3）DB_ROW_ID字段，6字节。包含一个随着新行插入而单调增加的行ID，如果innodb自动生成聚集索引，则该索引包含行ID值。否则，DB_ROW_ID列不会出现在任何索引中。
 ReadView : ReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。 已提交读和可重复读的区别就在于它们生成ReadView的策略不同。
 1.例如当前列表事务[80,100]
 如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。
 如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。
 如果你要访问的记录版本的事务id为110，那比事务列表最大id 100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。
 已提交读隔离级别下的事务在每次查询的开始都会生成一个独立的ReadView,而可重复读隔离级别则在第一次读的时候生成一个ReadView，之后的读都复用之前的ReadView。

mysql语句优化
1、尽量少用select *  因为会增加不必要的消耗，select 后面直接加上需要的字段名。
2、IN 包含的值不应过多
IN本身这个操作消耗就比较高，如果IN里面是连续的数值，则可以用between代替，IN里面的字段如果是添加了索引，效率还是可以的，目前测试一万以内还是可以，但是超过了结果可能会有点爆炸，不要问我为什么
3、in和exists、not in 和 not exists
exists以外层表为驱动表，先被访问，适合于外表小而内表大的情况。
in则是先执行子查询，适合外表大而内表小的情况，
一般情况是不推荐使用not in，因为效率非常低，
eg：
1)select * from table_a where table_a.id not in (select table_b.id from table_b)
2)select * from table_a left join table_b on table_a.id = table_b.id where table_b.id is null
语句2的效率是要高于语句1的，SQL的结果是获取到在table_a中存在但是table_b中不存在的数据，如果直接用not in是不走索引的，而且在table_b比较大的时候效率会非常低，实际工作中我试了一下直接not in，然后数据达到一万条的时候大概需要150S左右才能查出数据（感谢DBA和运维不杀之恩），我采取的方法是，先查出两个表的交集，这样得到的表会小很多，而且是用的in，效率会高很多，然后再用not in，最终的效果也是一样，但是时间只要2.56S，然后采取语句2的关联表来处理，时间缩短到了1.42S，基本上效率是比较高的，当然理想的是在1S内。
4、尽量少用or，同时尽量用union all 代替union
or两边的字段如果有不走索引的会导致整个的查询不走索引，从而导致效率低下，这时可以使用union all或者union，而两者的区别是union是将两个结果合并之后再进行唯一性的过滤操作，效率会比union all低很多，但是union all需要两个数据集没有重复的数据。
5、分段和分页查询
在扫描行数较多的情况下可以采取分段查询，循环遍历，结果合并处理，
使用合理的分页方式，在数据表量级逐渐增加的时候，limit分页查询的效率会降低。
1）select id,col from table limit 888888,1000
2）select id,col from table where id > 888887 limit 1000
取前一页的最大行数的id，然后根据这个id来限制下一页的起点。
6、不建议使用%前缀模糊查询
like "%abc"和like "%abc%"会导致索引失效而进行全文搜索。

慢查询日志
响应时间超过long_query_tine的SQL，被记录到慢查询日志中。
// SHOW VARIABLES LIKE '%slow_query_log%' ; 查看是否开启，默认没开启
// set global slow_quary_log = 1; 开启，仅本数据库有效，重启MySQL之后失效。
// show variables like '%long_query_time%'; 查看当前多少秒算慢
// set global long_query_time = 3; 设置慢的阙值时间
// show global status like '%Slow_queries%'; 查看当前数据库有多少条慢SQL

**Show Profile **
是MySQL提供可以用来分析当前会话中语句执行的资源情况，可以用于SQL的调优的测量。
默认关闭，并保存最近15次结果；
set profiling=on;   开启
SELECT * FROM `s_oas_oas_collect_amount_task`  执行测试的SQL
show profiles; 查看执行的SQL query_Id
show profile for query 16;
show profile block io,cpu for query 45;
show profile cpu,block io,memory,swaps,context switches,source for query 70;
通过上面的一些查询 大体可以看出这条SQL语句执行的时候哪些地方占用的时间太大了。
这次看到的是Copying to tmp table on disk(把内存中临时表复制到磁盘)和converting HEAP to MyISAM(查询结果太大，内存不够用了往磁盘上搬) 占有的时间太多。Creating tmp table (创建临时表，拷贝数据到临时表，用完再删除)
网上查了一下发现可以修改一下tmp_table_size和max_heap_table_size两个参数来调整，使得大数据量的查询时不用将结果集拷贝到物理磁盘。


show status like  'table%'; //分析表的锁定
 Table_locks_immediate：产生表级锁定的次数；
 Table_locks_waited：出现表级锁定争用而发生等待的次数，不能立即获取锁的次数，每等待一次锁值加1；
show status like  'innodb_row_lock%';  //分析行的锁定
 Innodb_row_lock_time_avg 平均等待时长
 Innodb_row_lock_waits 等待总次数
 Innodb_row_lock_time 等待总时长


 分库分表
 https://baijiahao.baidu.com/s?id=1622441635115622194



MySQL的redo日志和undo日志分别有什么用？
1）redo 作用：保证事务的持久性 一般讨论数据写入时，在MySQL中，一般叫事务操作，根据事务的ACID特性，如何保证一个事务提交后Durability的保证？而这就是 redo log 的作用。
当向MySQL写用户数据时，先写redo log，然后redo log根据"某种方式"持久化到磁盘，变成redo log file，用户数据则在"buffer"中(比如数据页、索引页)。
如果发生宕机，则读取磁盘上的 redo log file 进行数据的恢复。从这个角度来说，MySQL 事务的持久性是通过 redo log 来实现的。

2）undo 作用：实现事务回滚 Undo log是InnoDB MVCC事务特性的重要组成部分。当我们对记录做了变更操作时就会产生undo记录，Undo记录默认被记录到系统表空间(ibdata)中，
但从5.6开始，也可以使用独立的Undo 表空间。 Undo记录中存储的是老版本数据，当一个旧的事务需要读取数据时，为了能读取到老版本的数据，需要顺着undo链找到满足其可见性的记录。
当版本链很长时，通常可以认为这是个比较耗时的操作。 大多数对数据的变更操作包括INSERT/DELETE/UPDATE，其中INSERT操作在事务提交前只对当前事务可见，
因此产生的Undo日志可以在事务提交后直接删除（谁会对刚插入的数据有可见性需求呢！！），而对于UPDATE/DELETE则需要维护多版本信息，
在InnoDB里，UPDATE和DELETE操作产生的Undo日志被归成一类，即update_undo。


MySQL有哪些锁？以及各种锁的作用？
MySQL里面的锁大致可以分成全局锁、表级锁和行锁三类.
MySQL里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL）
一.表锁的语法是lock tables … read/write。可以用unlock tables主动释放锁，也可以在客户端断开的时候自动释放。lock tables语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象
    另一类表级的锁是MDL。MDL不需要显式使用，在访问一个表的时候会被自动加上。MDL的作用是，保证读写的正确性。当对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构(注意是表结构)变更操作的时候，加MDL写锁
    读锁之间不互斥，因此可以有多个线程同时对一张表增删改查
    读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行
    1.如果安全地给小表加字段？
    首先要解决长事务，事务不提交，就会一直占着DML锁。在MySQL的information_schema库的innodb_trx表中，可以查到当前执行的事务。如果要做DDL变更的表刚好有长事务在执行，要考虑先暂停DDL，或者kill掉这个长事务
    2.如果要变更的表是一个热点表，虽然数据量不大，但是上面的请求很频繁，而又不得不加个字段，该怎么做？
    在alter table语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到MDL写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后再通过重试命令重复这个过程
二.行锁
    在InnoDB事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议
    如果事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放
    例. A买电影票  A账户扣钱->影院账户加钱->记录一条交易流水    假如C来买票也会对影院账户加钱,所以影院账户这个操作最容易发生事务冲突, 可以改成A账户扣钱->记录一条交易流水->影院账户加钱 最大程度减少了锁的等待,提升了并发度

死锁和死锁检测
    在并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁
    一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数innodb_lock_wait_timeout来设置
    SHOW VARIABLES LIKE 'innodb_lock_wait_timeout'; //查看死锁时间
    SET innodb_lock_wait_timeout=5;
    另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数innodb_deadlock_detect设置为on，表示开启这个逻辑
    SHOW VARIABLES LIKE 'innodb_deadlock_detect';

MYSQL缓存 https://www.cnblogs.com/yueyun00/p/10898677.html  https://www.cnblogs.com/applelife/p/11576295.html
	1.1缓存机制说明
		缓存SQL文本和结果,用kV的形式保存在服务器内存中,如果有相同的SQL,直接从缓存中获取结果.省掉了解析优化执行SQL的过程
	1.2缓存失效
		表结构或数据!发生改变时,缓存将会失效,相关的缓存条目kv也会消失.例如instert,update,delete,alter,drop table等
	1.3使用场景
		频繁更新的表,查询缓存不合适.数据不变且有大量相同SQL查询的表,适用缓存提升性能
	2.1命中条件
		缓存的数据结构是HASH表. 以SQL,数据库名,客户端协议作为key.
		在判断命中前,MYSQL不会解析SQL,而是适用SQL去查询缓存.SQL任何字符不同都会不命中
		如果查询有不确定数据例如 like now,current_date() 都不会被缓存
	3.1工作流程
		服务器接收SQL，以SQL和一些其他条件为key查找缓存表,如果缓存命中，则直接返回缓存.如果缓存没有命中，则执行SQL查询，包括SQL解析、优化等。执行完SQL查询结果以后，将SQL查询结果写入缓存表
	4.缓存失败
		当表正在写入数据时，则这个表的缓存将会处于失效状态,在InnoDB中，如果某个事务修改了表，则这个表的缓存在事务提交前都会处于失效状态
	5.缓存的内存管理
		1.在内存中开辟一块空间.其中大概有40K的空间用来维护缓存和元数据.例如空间内存,数据表和查询结果的映射,SQL和查询结果的映射
		2.将大内存块分为小内存块,每个小块存储自身的类型,大小和查询结果数据,还有前后内存块的指针
		3.SQL未命中缓存,会在查询开始的就去申请一块空间.此时缓存数据大小未知.如果超出申请内存块大小就再申请,否则就会释放,所以可能会造成内存碎片.
	6.缓存的使用判断
		1.缓存命中率 = 缓存命中次数 (Qcache_hits) / 查询次数 (Com_select)
		2.写入率 = 缓存写入次数 (Qcache_inserts) / 查询次数 (Qcache_inserts)
		3.比率 = 命中次数 (Qcache_hits) / 写入次数 (Qcache_inserts)//高性能MySQL中称之为比较能反映性能提升的指数，一般来说达到3:1则算是查询缓存有效，而最好能够达到10:1
	7.缓存参数配置
		1.查看缓存相关配置
			SHOW VARIABLES LIKE '%query_cache%';
		2.mysql.ini配置
			2.1 query_cache_type 是否打开缓存 OFF（0）：关闭 , ON（1）,DEMAND（2）：按需使用查询缓存，只有明确写了SQL_CACHE的查询才会写入缓存
				如果query_cache_type为1而又不想利用查询缓存中的数据，可以用下面的SQL：SELECT SQL_NO_CACHE * FROM my_table WHERE condition;
				如果值为2，要使用缓存的话，需要使用SQL_CACHE开关参数： SELECT SQL_CACHE * FROM my_table WHERE condition;
			2.2 query_cache_size  缓存使用的总内存空间大小，单位是字节，这个值必须是1024的整数倍；
				默认情况下query_cache_size为0，表示为查询缓存预留的内存为0，则无法使用查询缓存
				设置query_cache_size的值 SET GLOBAL query_cache_size = 134217728; -- 注意值如果设得太小不会生效
			2.3 query_cache_min_res_unit 分配内存块时的最小单位大小
			2.4 query_cache_limit  MySQL能够缓存的最大结果，如果超出，则增加 Qcache_not_cached的值，并删除查询结果
			2.5 query_cache_wlock_invalidate  如果某个数据表被锁住，是否仍然从缓存中返回数据，默认是OFF，表示仍然可以返回
			2.6  GLOBAL STATUS 中关于缓存的参数
				Qcache_free_blocks：缓存池中空闲块的个数
				Qcache_free_memory：缓存中空闲内存量
				Qcache_hits：缓存命中次数
				Qcache_inserts：缓存写入次数
				Qcache_lowmen_prunes：因内存不足删除缓存次数
				Qcache_not_cached：查询未被缓存次数,例如查询结果超出缓存块大小,查询中包含可变函数等
				Qcache_queries_in_cache：当前缓存中缓存的SQL数量
				Qcache_total_blocks：缓存总block数
			2.7 减少缓存碎片的策略
				选择合适的block大小 ,使用 FLUSH QUERY CACHE 命令整理碎片，这个命令在整理缓存期间，会导致其他连接无法使用查询缓存
	清空缓存的命令
		RESET QUERY CACHE; // 从查询缓存中移出所有查询。
		FLUSH TABLES; //关闭所有打开的表，同时该操作将会清空查询缓存中的内容。	
	9. InnoDB查询缓存
		InnoDB存储引擎会对每个表设置一个事务计数器，里面存储当前最大的事务ID
		当一个事务提交时，InnoDB会使用MVCC中系统最大的事务ID更新当前表的计数器
		只有比这个最大ID大的事务能使用查询缓存，其他比这个ID小的事务则不能使用查询缓存
		在InnoDB中，所有加锁操作的事务都不使用任何查询缓存
		查询必须是完全相同的(逐字节相同)才能够被认为是相同的。
		查询字符串由于其它原因使用不同的数据库、不同的协议版本或者不同的默认字符集都会被认为是不同的查询而分别进行缓存。



为什么我只查一行的语句，也执行这么慢？  select * from information_schema.processlist ORDER BY TIME desc
    第一类：查询长时间不返回  show processlist命令，查看当前语句处于什么状态
     1.等MDL锁
         state字段Waiting for table metadata lock 代表有线程在表上持有MDL锁.把select语句堵住了
         通过查询sys.schema_table_lock_waits这张表直接找出造成阻塞的process id，把这个连接kill命令断开即可（MySQL启动时需要设置performance_schema=on，相比于设置为off会有10%左右的性能损失）
         SHOW VARIABLES LIKE 'performance_schema';
         select blocking_pid from sys.schema_table_lock_waits;
    2.等flush
        线程状态为Waiting for table flush 代表有一个线程政要对表t做flush操作
        出现Waiting for table flush状态的可能情况是有一个 flush tables命令被别的语句堵住了，然后它有堵住了select语句
    3.等行锁
        由于访问id=1这个记录时要加读锁，如果这时候已经有一个事务在这行记录上持有一个写锁
        sessionA启动了事务，占有写锁，还不提交，是导致sessionB被堵住的原因
   第二类：查询慢
        sessionA先用start transaction with consistent snapshot命令开启一个事务，建立事务的一致性读（又称为快照读。使用的是MVCC机制读取undo log中的已经提交的数据。所以它的读取是非阻塞的），之后sessionB执行update语句
        sessionB执行完100万次update语句后，生成100万个回滚日志
        select * from t where id=1 lock in share mode的语句是当前读，因此会直接读到1000001这个结果，速度很快；而select * from t where id=1这个语句是一致性读，因此需要从1000001开始，依次执行undo log，执行了100万次以后，才将1这个结果返回


SHOW ENGINE INNODB STATUS  查询数据库死锁记录
	SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS  1：查看当前的事务
	SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS 2：查看当前锁定的事务
	SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX 3：查看当前等锁的事务
	show processlist