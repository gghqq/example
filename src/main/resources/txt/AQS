[AQS参考内容](https://www.cnblogs.com/waterystone/p/4920797.html)
>![](../picture/AQS架构图.png)  
>AQS使用一个FIFO(先进先出)的队列来表示排队等待的线程,维护了一个volatile state代表共享的资源  
>队列头节点称作“哨兵节点”或者“哑节点”,它不与任何线程关联.其他的节点与等待线程关联,每个节点维护一个等待状态waitStatus  
>* AQS定义两种资源共享方式:Exclusive（独占,只有一个线程能执行,如ReentrantLock）和Share（共享,多个线程可同时执行,如Semaphore/CountDownLatch）.    
>* isHeldExclusively():该线程是否正在独占资源.只有用到condition才需要去实现它.  
>* tryAcquire(int):独占方式.尝试获取资源,成功则返回true,失败则返回false.  
>* tryRelease(int):独占方式.尝试释放资源,成功则返回true,失败则返回false.  
>* tryAcquireShared(int):共享方式.尝试获取资源.负数表示失败;0表示成功,但没有剩余可用资源;正数表示成功,且有剩余资源.    
>* tryReleaseShared(int):共享方式.尝试释放资源,如果释放后允许唤醒后续等待结点返回true,否则返回false.      
>* ReentrantLock为例,state初始化为0,表示未锁定状态.A线程lock()时,会调用tryAcquire()独占该锁并将state+1.其他线程再tryAcquire()时就会失败,直到A线程unlock()到state=0（即释放锁）为止,其它线程才有机会获取该锁.当然,释放锁之前,A线程自己是可以重复获取此锁的（state会累加）,这就是可重入的概念.但要注意,获取多少次就要释放多么次,这样才能保证state是能回到零态的.         
>* 再以CountDownLatch以例,任务分为N个子线程去执行,state也初始化为N（注意N要与线程个数一致）.这N个子线程是并行执行的,每个子线程执行完后countDown()一次,state会CAS减1.等到所有子线程都执行完后(即state=0),会unpark()主调用线程,然后主调用线程就会从await()函数返回,继续后余动作.   
>* 一般来说,自定义同步器要么是独占方法,要么是共享方式,他们也只需实现tryAcquire-tryRelease、tryAcquireShared-tryReleaseShared中的一种即可.但AQS也支持自定义同步器同时实现独占和共享两种方式,如ReentrantReadWriteLock.