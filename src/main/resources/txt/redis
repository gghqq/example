http://redisdoc.com/string/set.html

###1.redis是什么  
```
  redis是一个key-value形式的非关系型内存数据库
整个数据库加载在内存中,通过异步的方式把数据flush到硬盘上保存
```
###2.Redis存储的数据结构
```
Redis有5中基础数据结构,string(字符串),list(列表),hash,set(集合)和zset(有序集合)
一个string字符串类型的值能存储最大容量为512M
```
###3.Redis为什么块
```
1.内存操作
2.单线程.省去上下文切换,锁竞争的开销
3.非阻塞IO模型.epoll
```
###4.Redis锁的问题
```
1.可以通过setnx方法设置分布式锁
setnx hello world 成功返回1 失败返回0
2.避免redis宕机无法释放锁 可以加锁时间,并保证原子性操作
set hello world nx ex 3(单位为s)
set hello world nx px 1000(单位为毫秒)

实现分布式锁要满足3点：多进程可见，互斥，可重入。
1.redis本身就是JVM之外,满足可见性
2.A执行业务,设置锁10s,执行了15s->B获取超时释放的锁->A执行完又释放锁->违反互斥性
解决方案:set锁时存入当前线程的唯一标识,释放时判断是不是自己标识的锁
3.重入锁解决方案
@redis/RedisLock.java
```
###5.Redis缓存穿透和缓存雪崩 ,热key,大key问题
```
  1.缓存雪崩是指某时间段缓存集中过期失效,请求绕开缓存,直接请求数据库.
造成雪崩的方式有两种:redis宕机. 缓存集中过期
解决方案:key过期时间设置固定时间+随机秒
  2.缓存穿透是查询数据库和缓存都没有的数据.会一直请求数据库.
解决方式 1.缓存空对象,代码维护简单. 2.布隆过滤器 @GuavaBloomFilter.java
  3.热key问题:瞬间有几十万的请求去访问redis上某个固定的key，从而压垮缓存服务.或者秒杀商品,集中请求这一件
解决方案:1.利用二级缓存.比如ecache或hashmap 存放在JVM. 直接访问JVM  
         2.备份热key.伪代码
        const M = N(集群数) * 2
        //生成随机数
        random = GenRandom(0, M)
        //构造备份新key
        bakHotKey = hotKey + “_” + random
        data = redis.GET(bakHotKey)
        if data == NULL {
        data = GetFromDB()
        redis.SET(bakHotKey, expireTime + GenRandom(0,5))
        }
        3.限流熔断
    4.大key指value特别大的key。比如很长的字符串，或者很大的set等等
问题:大key会造成数据倾斜,某个节点内存占用过高.2、当删除大key或者大key自动过期的时候，会造成QPS突降，因为Redis是单线程的缘故
解决方案:可以将一个大key进行分片处理，比如：将一个大set分成多个小的set。
```
##6.redis的内存维护策略
```
1.为数据设置超时时间, expire key time 
2.采用LRU算法动态删除
    1.volatile-lru：设定超时时间的数据中,删除最不常使用的数据. 这里只未使用的数据
    2.allkeys-lru：查询所有的key中最近最不常使用的数据进行删除，这是应用最广泛的策略.
    3.volatile-random：在已经设定了超时的数据中随机删除.
    4.allkeys-random：查询所有的key,之后随机删除.
    5.volatile-ttl：查询全部设定超时时间的数据,之后排序,将马上将要过期的数据进行删除操作.
    6.noeviction：如果设置为该属性,则不会进行删除操作,如果内存溢出则报错返回.
    7.volatile-lfu：从所有配置了过期时间的键中驱逐使用频率最少的键,这里指使用最少的
    8.allkeys-lfu：从所有键中驱逐使用频率最少的键
```

##7.redis持久化
```
Redis持久化有RDB和AOF这2种方式。 RDB：将数据库快照以二进制的方式保存到磁盘中。 
AOF：以协议文本方式，将所有对数据库进行过写入的命令和参数记录到AOF文件，从而记录数据库状态
```